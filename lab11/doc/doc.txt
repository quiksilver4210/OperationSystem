Задание 1
-Выполнить  ./vector-deadlock -n 2 -l 1 -v
которая инициирует 2 потока  (-n 2) и каждый из них
осуществляет одно  сложение (-1 1) с опцией (-v).
Объяснить результат. Меняется ли он от вызова к вызову?
- Добавить флаг  -d и изменить количество циклов  -l .
Всегда ли возникает состояние взаимной
блокировки потоков (deadlock)?
- Теперь меняем число потоков -n.
Есть ли такое число потоков, при котором блокировка не возникает?

ОТВЕТ:
-  Порядок результата может меняться от вызова к вызову, так как
в функции worker отсутсвуют блокировки, поэтому не определена
очередность вызова функции printf

- Иногда может возникать взаимная блокировка

- При одном потоке блокировка не возникнет

Задание 2.  vector-global-order.c:
- За счет чего программа избегает блокировок?
- Для чего предусмотрен специальный случай в vector add(), когда исходный и результирующий вектор совпадают?
- Флаги: -t -n 2 -l 100000 -d. Как меняется время в зависимости от числа циклов и числа потоков?
- Что происходит, когда включается ключ -p (при сложении различных векторов и одного и того же)?

ОТВЕТ:
- Изза сравнения указателей на векторы, будет зависеть порядок блокировки,
поэтому не будет взаимных блокировок
- Чтобы блокировку сделать всего 1 раз
- При увеличении числа сложение и числа потоков время увеличится


Задание 3. vector-try-wait.c:
- Нужен ли первый вызов  pthread mutex trylock()?
- Как меняется число повторных попыток, когда растет число потоков?

ОТВЕТ:
- Нужен, для блокировки результирующего вектора
- При увеличении числа потоков, увеличивается число повторных попыток

Задание 4.  vector-avoid-hold-and-wait.c:
- Сравнить с другими подходами.
- Как меняется производительность в зависимости от наличия флага -p?

ОТВЕТ:
- Здесь используется глобальная блокировка, взаимной блокировки не будет
- При использовании флага производительность скорость выполнения повыситься

Задание 5.  vector-nolock.c:
- Сравнить семантику и производительность с другими вариантами при работе с двумя одинаковыми векторами и в случае
когда каждый поток работает на своем векторе  -p.

ОТВЕТ:
При -n 3 -l 100000

vector-global-order             1.8sec     0.5sec
vector-try-wait                 2.4sec     0.68sec
vector-nolock                   8.47sec    6.28sec
vector-avoid-hold-and-wait      3.24sec    0.47sec

